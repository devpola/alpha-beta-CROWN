# YAML configuration file for verifying the Fashion MNIST custom model.
general:
  device: cpu  # Specify the device to use ('cpu' or 'cuda').

model:
  # Custom model defined as fashion_mnist_model() in custom_model_data.py.
  name: Customized("custom_model_data", "fashion_mnist_model", in_channel=1, out_dim=10)
  # Path to the pretrained model checkpoint.
  path: alpha-beta-CROWN/complete_verifier/assignment4/fashion_mnist_model.pth

data:
  dataset: Fashion_MNIST  # Dataset name.
  mean: [0.286]  # Mean for normalization.
  std: [0.353]   # Std for normalization.
  start: 0  # First example to verify in dataset.
  end: 1  # Last example to verify in dataset. We verify 100 examples in this test.

specification:
  norm: .inf  # Linf norm (can also be 2 or 1).
  epsilon: 0.00784313725490196  # epsilon=2./255.

attack:
  pgd_steps: 100  # Increase for a stronger attack. A PGD attack will be used before verification to filter on non-robust data examples.
  pgd_restarts: 30  # Number of attack restarts for robustness evaluation.

solver:
  batch_size: 256  # Number of subdomains to compute in parallel in bound solver. Decrease if you run out of memory.
  alpha-crown:
    iteration: 100   # Number of iterations for alpha-CROWN optimization. Alpha-CROWN is used to compute all intermediate layer bounds before branch and bound starts.
    lr_alpha: 0.1    # Learning rate for alpha in alpha-CROWN. The default (0.1) is typically ok.
  beta-crown:
    lr_alpha: 0.01  # Learning rate for optimizing the alpha parameters, the default (0.01) is typically ok.
    lr_beta: 0.05  # Learning rate for optimizing the beta parameters, the default (0.05) is typically ok.
    iteration: 20  # Number of iterations for beta-CROWN optimization. 20 is often sufficient, 50 or 100 can also be used.

bab:
  timeout: 120  # Timeout threshold for branch and bound. Increase for verifying more points.
  branching:
    reduceop: min  # Reduction function for the branching heuristic scores, min or max.
    method: kfsb  # Branching method; 'kfsb' provides a balance between speed and accuracy.
    candidates: 3  # Number of candidates to consider in kfsb. More leads to slower but better branching.
